This is an attempt to catch as much operations that should happen when the 
kamalsite is working. (It implies both backend and frontend.) The idea is to do
so by modelling a user interaction with the site, identifying all actions the 
interaction consists of, and constructing a tree of operations initiated as a 
result of each action. This is why the file is called `actions_results`.

The goal is to understand how operations are chained together so that it's easy
to create tests. Because this way, parts of the site that are not covered by 
tests are more evident.

A - for actions, R - for results, (n) - for counting actions.

A1. A person visits (1) the site.
    R:
    1. A cookie policy consent and management block (with a `Manage cookies`
       button) is conjured up at the bottom of the site the first time a user
       with this particular meta-data enters the site. They are notified that,
       by continuing to use the site, they implicitly accept the cookie policy
       of the site.
    2. Something like storing cookie data happens.
       TODO: learn how to do this.

A2. They choose from the list of categories (2) in the filter block.
    R:
    NOTE: A2 assumes the filter block is built in the catalog page whereas it'd
          be probably better if it appears from the left side after a user 
          clicks on some `Filter` button.
    1. Not sure if anything particular happens. It's probably a simple html
       form that sends the POST data after being confirmed (see A3).

A3. They click on `confirm` (3) to confirm their choice.
    R:
    1. The client sends a POST request to the server.
    2. CatalogView retrieves categories from request.POST.
       TODO: create CatalogView.
    3. The view creates a queryset of products from retrieved categories using
       Product.objects.filter(...).
    4. The queryset is supplied to a dedicated template that does its job.

A4. They see a catalog that lists products from chosen categories.
A5. They like one of the products (4).
    NOTE: a like acts as a bookmark. As I understand it, this like will be 
          discarded as soon as the cookies of this anonymous user are deleted.
    R:
    1. CatalogView retrieves user, product data from request.POST to create a
       Like instance or to set its liked to True if it already exists.
    2. The view tells product_card template to display the product as liked for
       this user.
       TODO: create the view and the template.

A6. They like another couple of products (see A5).
A7. They go to the Bookmarks section (5).
    R:
    1. BookmarksView creates a queryset of Like objects for this user for which
       liked=True.
       TODO: create BookmarksView. 
       NOTE: It should be a small drop-down panel, not a separate page.
    2. The view tells a template to display products that these Like objects
       point to.

A8. They delete one of the products from bookmarks (6).
    R:
    1. The client sends a POST request.
    2. BookmarksView retrieves data from POST request.
    3. BookmarksView gets a corresponding Like object and sets its liked to 
       False.
    4. BookmarksView the product from context used in rendering the response.
       NOTE: If it so happens that the product is displayed in the catalog on
             the background of the bookmarks panel, it should be somehow
             updated, too. But I don't know whether it should be BookmarksView
             or CatalogView.
       TODO: learn how to do it.

A9. They click on one of the products (7).
    R:
    1. The client sends a GET request.
    2. ProductView gets user.id and product.id from request.GET.
       TODO: create ProductView.
       2.1. The view uses user.id to find out what product data to retrieve
            from a corresponding product (as it may differ for different groups
            of users).
       2.2. These are supplied to a dedicated template that constructs the 
            page.
    3. A Visit model instance is created that connects user, product, date, and
       maybe other data related to each visit.
       TODO: create the Visit model.
             NOTE: the model should probably have a unique constraint on user-
                   product combination within a certain time frame (e.g. a day
                   or an hour).

A10. The user clicks on the `Add to cart` button (8).
     R:
     1. The client sends a POST request.
     2. ProductView retrieves user.id, product.id data from request.POST.
     3. ProductView.add_to_cart(...) is called.
        TODO: create the corresponding method.
        3.1. An Addition instance is created that connects the product with a 
             Cart instance connected to the user.
             NOTE: it may be done through another method called within the
                   current one.
             3.1.1. If Cart.DoesNotExist is catched, the Cart instance is 
                    created and then the product is added to it.
             3.1.2. product.min_order_quantity is provided as default quantity
                    value to the instance (it's editable).

A11. They go to the Bookmarks again (see A7).
A12. They go to the page of the next product (see A9).
A13. They choose another available colour (9).
     R:
     NOTE: this one assumes that product_details (or whatever) template uses
           different static files to display the same product in its different
           variations.
     1. The client sends a GET request.
     2. ProductView retrieves colour related data from request.GET.
     3. ProductView retrieves a product corresponding to these data.
     4. ProductView puts the data in context to render the response.
     5. The product_details template makes its job.

A14. They click on the `Add to cart` button (10).
     R:
     1. The client sends POST request.
     2. ProductView retrieves product.id from request.POST. 
     3. See A10-3.

A15. The user clicks on the `My cart` button (11).
     R:
     1. The client sends a GET request.
     2. CartView retrieves user.id from request.GET. 
        TODO: create the CartView view.
        NOTE: The view is a panel hovering above the rest of the content
              (similar to the bookmarks panel). This style will likely require
              using javascript.
     3. CartView puts a queryset of Addition objects associated with the user
        into the context of a response.
        3.1. A corresponding template would use it to mark those additions for
             which ready_to_order=True and to keep the rest unmarked.
     4. A value returned by Cart.amount() (which is a total monetary amount of
        marked items) is put in the context, too.
        TODO: create Cart.amount().
        NOTE: See Order.amount().
     5. From the BoughtTogetherCounts model, CartView retrieves Products that
        people often buy together with the ones in the Cart.
        TODO: create the BoughtTogetherCounts model. 
        NOTE: I see it as a through-model of a many-to-many relationship of
              Product to itself. It will be created/updated every time an order
              gets confirmed and its count PositiveIntegerField will be set to
              unity at creation and incremented each time it's updated by 1.
     6. CartView limits the queryset by top 3 products and updates the context.
     7. The reponse uses a template that adds `Add to cart` and `Quick preview`
        buttons to items in the People also buy block.
        NOTE: Quick preview feature will probably require Javascript.

A16. They see a message saying that they will have access to wholesale prices
     if they sign in. 
     They also see that, initially all the products in the
     cart are marked. The mark is of the same colour as the `Buy` button to
     make it intuitive that the button only creates an order for the marked
     items.

A17. So let's say the user removes a mark from one of the products (12).
     R:
     1. The client sends a POST (or GET, see A17.3.TODO) request.
     2. CartView retrieves addition.id from request.POST.
        2.1. CartView.remove_mark() gets a corresponding Addition object and
             sets its ready_to_order to False.
        2.2. CartView updates the context with a new value that CartView.
             amount() returns.
     3. The `My cart` panel now display an updated total price.
        TODO: I suspect this can be achieved using GET requests and leaving all
              the computations to the template at this point. Find this out - 
              NOT DONE.

A18. They click on the `Split` button (13) of one of the items.
     R:
     1. The client sends a POST request.
     2. CartView retrieves product.id from request.POST.
        2.1. CartView creates a new Addition instance that connects a product
             corresponding to the product.id with the cart. The ready_to_order
             is set to False.
             NOTE: This is useful for keeping a product in the cart after
                   confirming an order with it if one wants to save it for the
                   next order as well.
        2.2. CartView updates the context with the new queryset of addition
             objects.
     3. The corresponding template puts a new item into the `My cart` panel.

A19. They click on the `+` button next to one of the items in the cart (14).
     This increases the quantity of the product (`-` button is not working when
     the quantity is set to min_order_quantity so it's toned out a bit). 
     NOTE: They also could just type the required quantity manually.
     R:
     1. The client sends a POST (or GET, see A17.3.TODO) request.
     2. CartView updates the quantity of the corresponding Addition instances 
        based on data retrieved from request.POST.

A20. An unauthenticated user that reached this point could now click on the
     `Buy` button right away (15).
     R:
     1. The client sends a POST request with all the data from user input in
        `My cart`.
     2. CartView.buy() method saves changes then calls OrderView.
        TODO: create OrderView.
     3. OrderView creates an Order instance.
        3.1. For each product in the cart, OrderView creates OrderDetail
             instances that connect them to the Order instance.
        3.2. OrderDetail.quantity values are set to quantity values of
             corresponding Addition instances
     4. A template the OrderView uses is informed that the user has to provide
        purchaser and receiver data.
        4.1. For an authenticated user, the purchaser data would be put into
             the context automatically.
        4.2. The template would still allow editing the auto-filled purchaser
             form.

A21. Or they could decide to sign-in first, if they noticed the `Fast sign-up`
     button under the message from A16, and click on the button (16).
     R:
     1. The client sends a GET request.
     2. FastAuthView uses a fast_sign_up template to render a response.
     3. The template displays a form that accepts user email and provides
        two fields for creating and confirming a password. Under the form,
        there is an `Already have an account` button.
        TODO: create FastAuthView.
        NOTE: The form itself is on a panel hovering over the page, not a
              separate page and not on the `My cart` panel. Probably will
              require using Javascript.

A22. They type their email, create a password, confirm it, and then click on
     the `Create an account` button (17).
     R:
     1. The client sends a POST request (or maybe it's GET and the POST will be
        when the user clicks on the confirmation link in the email).
     2. FastAuthView retrieves data from request.POST and validates it.
        2.1. It probably has to cache data on this step.
        2.2. FastAuthView sends an email to the specified address with a prompt
             to confirm account creation.
             2.2.1. I suspect, FastAuthView puts some meta-data into the 
                    confirmation link in the email about the fact that the
                    account was created from the `My cart` panel so that it re-
                    directs back there after receiving the confirmation.
                    TODO: learn how to do this.
        2.3. The template that FastAuthView uses to render a response shows a
             message saying that the user has to confirm the creation of the
             account in the email sent to the address they specified.

A23. They confirm the creation of the account (18) by clicking on the link in
     the email.
     R:
     1. The client sends a POST (right?) request.
     2. FastAuthView retrieves data from request.POST, confirms the creation is
        confirmed, and creates a User instance based on the cached data (see 
        A22.2.1).
        2.1. User.gen_username() generates a temporary username based on the
             instance id.
        2.2. Probably FastAuthView also attaches all the cookie data collected
             before the account was created to the new User instance.
             TODO: learn how this works.
        2.3. Connect all Cart, Order, Like, and other model instances to the
             new User instance instead of the AnonymousUser.
     3. FastAuthView redirects back to `My cart`.
     4. CartView checks if any item should have a lower price for this user. If
        so, it updates the context.

A24. A user with an account would have clicked on the `Already have an account`
     button (19)(see A21.3).
     R:
     1. The client sends a GET request.
     2. FastAuthView retrieves data from request.GET. 
        2.1. FastAuthView updates the context.
     3. The template used knows now to display a sign-in form instead of the
        sign-up form.
        3.1. A `Log in` button in the form contains meta-data that will tell
             FastAuthView to redirect back to `My cart`.

A25. They provide the credentials and click on the `Log in` button (20).
     R:
     1. The client sends the POST request.
     2. FastAuthView retrieves data from request.POST and validates the input.
        2.1. FastAuthView attaches all the cookie data collected before the
             user had authenticated to the corresponding User instance.
        2.2. FastAuthView merges the AnonymousUser Cart with the User Cart and
             replaces AnonymousUser with the User in other model instances
             created before the user had authenticated.
        2.3. FastAuthView redirects to `My cart` (see A24.3.1.).

A26. In `My cart` users may click on the `Quick preview` button (21) of one of
     the items in the `People also buy` block (see A15.7.).
     R:
     1. The button tells ProductQuickView to take the reins.
     2. ProductQuickView provides the same data as ProductView, to the context.
        NOTE: It's not clear as of now whether this should count as a visit of
              a product page.
        2.1. ProductQuickView renders a response.
     3. The template used makes it a box hovering over the rest of the site
        with an `X` button to close the box.
        NOTE: probably requires Javascript.

A26.1. And then click on the `X` button (22), satisfied with the preview.
       R:
       1. The box is closed. Nothing changed behind the box so CartView doesn't
          have to do its job again.
          NOTE: again, I think JS is the way to go about it.

A27. A user could delete an item from the cart (23).
     R:
     1. The client sends a POST request.
     2. CartView retrieves product.id from request.POST.
        2.1. CartView retrieves a corresponding product using get().
        2.2. CartView runs `cart.products.remove(product)`.

A27. After what happens in A20.4., a user would enter the purchaser's full name
     and email and the receiver's full name and phone number and then click on
     the `Next step` button (24).
     R:

TO BE CONTINUED FROM THIS POINT. NEED TO LEARN MORE ABOUT FORMS.

     1. The client sends a POST request.
     2. OrderView retrieves the receiver's full name and phone number from
        request.POST and puts them into corresponding fields of the Order
        instance.
        2.1. Data provided by the user is validated.
     2. The validated data is stored in the Order model.
        2.1. User data is memorized but not yet saved because saving it
             to database requires user's consent which is asked for on 
             later steps of order creation. Only then, the data will be 
             saved in the database. 
             NOTE: I suspect this might require a child of AnonymousUser
                   that's got email and maybe phone number specified but
                   not the password. If such a user ever creates an
                   account with the same data, this AnonymousUser child 
                   will be replaced with a regular User.

A28. If those were the same people, the user would mark the `Data for the 
     purchaser and the receiver are the same` flag (24).
     R:
     1. OrderCreationStepOneView (or something with a simpler name) fills out
        the receiver part of the view automatically, except for the phone 
        field.      

A28. They click on the `Next step` button (25). They will be prompted to 
     choose a delivery method (shipment vs pick-up).
     R:
     1. OrderCreationStepTwoView uses a template that provides the user a 
        tool for sending POST data to the server, that will affect the value
        of Order.shipped boolean field.

A29.1. A user could pick the shipment (26).
       R:
       1. OrderCreationStepTwoView retrieves data from request.POST to change
          the value of Order.shipped accordingly.
       2. The view switches to a template that prompts the user to provide the
          address to ship goods to.
          2.1. The template checks if the user is authenticated or not and 
               displays a `save address` button in case they are.

A29.2. They could provide a destination address (27) after being prompted to.
       R:
       1. OrderCreationStepThreeView retrieves data from request.POST and puts
          it into Order.shipment_address.
          NOTE: Keep in mind that in the future, storing addresses may require
                creation of a standalone model with separate fields for city, 
                street, apt, etc.
                It can also become a part of a graph-like structure or a model
                that stores distances from a sending point to a shipment 
                address, whatever the reason to do this.

A29.3. An authenticated user could save the address (28) into their profile.
       R:
       1. OrderCreationStepThreeView creates a Shipment instance that connects
          the address data from Order.shipment_address with the user data.

A29.4. Then they would click on the `Next step` button (29).
       R:
       1. OrderCreationStepFourView interacts with the transporting companies 
          sites APIs to retrieve delivery prices based on the shipment_address
          and other relevant data. It handles connection errors and data being
          incomplete because of it.
       2. A corresponding template renders the page with the transporting 
          company names and retrieved prices, if any, in a form that prompts
          the user to choose a single option before going to the next step.

A29.5. And then they would choose a transporting company (30).
       R:
       1. OrderCreationStepFourView connects an Order instance to a 
          TransportingCompany model instance.
          TODO: create the TransportingCompany model.

A30. They could choose to pay right away and do so on the next step (which
     I'll come back to later) or choose to pay at the time of receiving the
     purchased goods (31), whether those were shipped or picked up.
     R:
     1. OrderConfirmedView uses Order.amount() method to tell a dedicated
        template what figure to display as the total cost of the order 
        (including the shipment).
     2. Product.quantity is adjusted for all products in the order.
        TODO: understand implications of a user choosing to pay at the point
              of delivery such that how the company receives payment and how
              the site knows when the order is paid or when the payment is 
              received (likely the former is what the site should know).

A31. On the other hand, a user may choose the pick-up method (32)(in which
     case, A29 is not relevant).
     R:
